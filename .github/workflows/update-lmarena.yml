name: Update LM Arena Leaderboard

on:
  # 定时任务：每天 UTC 时间 11:30 AM 运行一次
  # (对应北京时间为每天 19:30)
  schedule:
    - cron: '30 11 * * *'
  
  # 允许手动触发此工作流
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 操作系统环境

    steps:
      - name: Checkout repository # 检出您的仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的历史记录，以便进行文件差异比较

      - name: Set up Python # 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # 将 Python 版本固定为 3.13

      - name: Install dependencies # 安装必要的 Python 库
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests tabulate

      - name: Run Leaderboard Update Script # 运行 Python 脚本
        id: run_script # 给这个步骤一个ID，以便后续步骤引用它的输出
        run: python .github/scripts/update_lmarena.py
        # 如果脚本成功更新了文件（返回0），则后续步骤继续
        # 如果脚本没有更新文件或出错（返回非0），则此步骤失败，后续步骤可能不会运行

      - name: Commit and push if changes # 如果文件有变化，则提交并推送
        # 只有当上一步（运行脚本）成功时才执行此步骤
        if: success() # 确保上一步没有因为错误而失败
        run: |
          # 检查是否有实际的文件更改需要提交
          # git diff --exit-code 会在有差异时返回非0，没有差异时返回0
          git diff --quiet other/model_rank/lmarena.md || \
          (
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add other/model_rank/lmarena.md
            git commit -m "Auto: Update LM Arena Leaderboard data"
            git push
          )
          echo "No changes to commit or changes committed."

  dispatch-translation-workflow:
    needs: update-data
    if: success() # 确保 update-data job 成功
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的历史记录，以便进行文件差异比较
      - name: Get current and previous commit SHAs
        id: get_shas
        run: |
          AFTER_SHA=$(git rev-parse HEAD)
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            BEFORE_SHA=$(git rev-parse HEAD^)
          else
            BEFORE_SHA=$AFTER_SHA # 如果没有父提交，则 before_sha 等于 after_sha
          fi
          echo "before_sha=$BEFORE_SHA" >> $GITHUB_OUTPUT
          echo "after_sha=$AFTER_SHA" >> $GITHUB_OUTPUT
      - name: Dispatch translate-docs workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }} # 需要一个具有 repo 权限的 token
          repository: CherryHQ/cherry-studio-docs # 触发自身仓库的 workflow
          event-type: trigger-translation # 触发 translate-docs.yml 的 trigger-translation 事件
          client-payload: '{"before_sha": "${{ steps.get_shas.outputs.before_sha }}", "after_sha": "${{ steps.get_shas.outputs.after_sha }}"}'
